// Write your code here !
// Don't tell me what to do!

// Temperature constants
env int desiredTemp_const = 22;

// thresholds for heating
env int thresh_heating_low = 15;
env int thresh_heating_high = 21;

// thresholds for cooling
env int thresh_cooling_low = 23;
env int thresh_cooling_high = 30;

// Polling constants
env int sensorPoll_const = 2;
env int tickPoll_const = 10;
env int regulationPoll_const = 5;


reactiveclass Controller(5) {
    knownrebecs { HC_Unit hc_unit; }

    statevars { 
        int currentTemp;
        boolean isHeating;
        boolean isCooling;
    }

    Controller() {
        isCooling = false;
        isHeating = false;
        // currentTemp = desiredTemp_const; // Start off with desired
        // currentTemp = ?(15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)
    }

    msgsrv setCurrent(int value) {
        currentTemp = value;
        self.updateOutput();
    }

    msgsrv updateOutput() {
        if (currentTemp >= thresh_heating_high && currentTemp <= thresh_cooling_low) {
            if (isCooling || isHeating) {
                hc_unit.switchoff();
                isCooling = false;
                isHeating = false;
            }
        }
        else if (currentTemp > thresh_heating_low && currentTemp < thresh_heating_high) {
            if (!isHeating) {
                hc_unit.setHeating();
                isHeating = true;
                isCooling = false;
            }
        }
        else if (currentTemp > thresh_cooling_low && currentTemp < thresh_cooling_high) {
            if (!isCooling) {
                hc_unit.setCooling();
                isCooling = true;
                isHeating = false;
            }
        }
    }
}

reactiveclass Sensor(5) {
    knownrebecs { 
        Room room;
        Controller controller;
    }

    Sensor() {
        self.callSensor();
    }

    msgsrv callSensor() {
        room.getTemp();
        self.callSensor() after(sensorPoll_const);
    }

    msgsrv setCurrent(int value) {
        controller.setCurrent(value);
    }
}

reactiveclass Room(5) {
    knownrebecs { Sensor sensor; }

    statevars { 
        int currentTemp;
        int currentRegulation;
        int outside_air;
     }

    Room() {
        currentTemp = desiredTemp_const;
        currentRegulation = 0;
        outside_air = 0;
        self.updateStatus();
    }

    msgsrv updateStatus() {
        outside_air = ?(1, 0, -1);
        currentTemp = currentTemp - outside_air + currentRegulation;
        self.updateStatus() after(tickPoll_const);
    }

    msgsrv setRegulation(int value) {
        currentRegulation = value;
    }

    msgsrv getTemp() {
        sensor.setCurrent(currentTemp);
    }
}

reactiveclass HC_Unit(5) {
    knownrebecs { Room room; }

    statevars { 
        boolean heaterOn;
        boolean coolerOn;
        int currentRegulation;
    }

    HC_Unit() {
        heaterOn = false;
        coolerOn = false;
        currentRegulation = 0;
        self.regulateTemp();
    }

    msgsrv setCooling() {
        currentRegulation = -1;
        heaterOn = false;
        coolerOn = true;
    }

    msgsrv setHeating() {
        currentRegulation = 1;
        heaterOn = true;
        coolerOn = false;
    }

    msgsrv switchoff() {
        currentRegulation = 0;
        coolerOn = false;
        heaterOn = false;
    }

    msgsrv regulateTemp() {
        room.setRegulation(currentRegulation);
        self.regulateTemp() after(regulationPoll_const);
    }
}

main {
    Room room(sensor): ();
    Controller controller(hc_unit): ();
    Sensor sensor(room, controller): ();
    HC_Unit hc_unit(room): ();
}