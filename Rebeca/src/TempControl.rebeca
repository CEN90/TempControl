// Temperature constants
env int desiredTemp_const = 25;

// thresholds for heating
env int THRESHOLD_LOW = 24;

// thresholds for cooling
env int THRESHOLD_HIGH = 26;

// Hard boundaries
env int MAX_TEMP = 30;
env int MIN_TEMP = 20;

// Polling constants
env int SENSOR_DELAY = 2;
env int ROOM_DELAY = 10;
env int REGULATION_DELAY = 5;


reactiveclass Controller(5) {
    knownrebecs { HC_Unit hc_unit; }

    statevars { 
        int currentTemp;
        boolean isHeating;
        boolean isCooling;
    }

    Controller() {
        isCooling = false;
        isHeating = false;

        currentTemp = 0; 
    }

    msgsrv setCurrent(int value) {
        if (value != currentTemp) {
            self.updateTemp(value);
        }
    }

    msgsrv updateTemp(int value) {
        currentTemp = value;
        self.updateOutput();
    }

    msgsrv updateOutput() {
        boolean isDesiredRange = currentTemp >= THRESHOLD_LOW && currentTemp <= THRESHOLD_HIGH;
        boolean tempHighHeating = currentTemp >= THRESHOLD_HIGH && isHeating;
        boolean tempLowCooling = currentTemp <= THRESHOLD_LOW && isCooling;      

        if (isDesiredRange) 
        {
            if (tempHighHeating || tempLowCooling) {
                hc_unit.switchoff();
                isCooling = false;
                isHeating = false;
            } 
        } 
        else if (currentTemp <= THRESHOLD_LOW) 
        {
            hc_unit.setHeating();
            isHeating = true;
        } 
        else if (currentTemp >= THRESHOLD_HIGH) 
        {
            hc_unit.setCooling();
            isCooling = true;
        } 
    }
}

reactiveclass Sensor(5) {
    knownrebecs { 
        Room room;
        Controller controller;
    }

    statevars {
        int prev_temp;
    }

    Sensor() {
        prev_temp = 0;
        self.callSensor();
    }

    msgsrv callSensor() {
        room.getTemp();
        self.callSensor() after(SENSOR_DELAY);
    }

    msgsrv setCurrent(int value) {
        controller.setCurrent(value);
    }
}

reactiveclass Room(5) {
    knownrebecs { Sensor sensor; }

    statevars { 
        int currentTemp;
        int currentRegulation;
        int outside_air;
     }

    Room() {
        currentTemp = 0;
        currentRegulation = 0;
        outside_air = 0;
        self.start();
    }

    msgsrv start() {
        currentTemp = ?(21, 22, 23, 24, 25, 26);
        self.updateStatus();
    }

    msgsrv updateStatus() {
        if(currentTemp <= 22 || currentTemp >= 28){
            outside_air = ?(1, 0, -1);
            currentTemp = currentTemp - outside_air + currentRegulation;

        } else {
             outside_air = ?(2, 1, 0, -1, -2);
            currentTemp = currentTemp - outside_air + currentRegulation;
        }
        self.updateStatus() after(ROOM_DELAY);
    }

    msgsrv setRegulation(int value) {
        if(currentTemp > 23 && currentTemp < 27){
            value *= ?(0, 1);
        }

        currentRegulation = value;
    }

    msgsrv getTemp() {
        sensor.setCurrent(currentTemp);
    }
}

reactiveclass HC_Unit(5) {
    knownrebecs { Room room; }

    statevars { 
        boolean heaterOn;
        boolean coolerOn;
        int currentRegulation;
    }

    HC_Unit() {
        heaterOn = false;
        coolerOn = false;
        currentRegulation = 0;
        self.regulateTemp();
    }

    msgsrv setCooling() {
        currentRegulation = -1;
        heaterOn = false;
        coolerOn = true;
    }

    msgsrv setHeating() {
        currentRegulation = 1;
        heaterOn = true;
        coolerOn = false;
    }

    msgsrv switchoff() {
        currentRegulation = 0;
        heaterOn = false;
        coolerOn = false;
    }

    msgsrv regulateTemp() {
        room.setRegulation(currentRegulation);
        self.regulateTemp() after(REGULATION_DELAY);
    }
}

main {
    Room room(sensor): ();
    Controller controller(hc_unit): ();
    Sensor sensor(room, controller): ();
    HC_Unit hc_unit(room): ();
}